geom_abline(intercept = 0, slope = 2*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 1*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 0*slope, linetype='dashed') +
theme_bw() +
#ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'Absolute Prediction Error [$]')
lm.dollars = data.frame(cbind(exp(lm.predictions)-true, true))
colnames(lm.dollars) = c('Error','Real')
ggplot(lm.dollars, aes(x=Real, y=Error)) +
geom_point() +
theme_bw() +
ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'Prediction Error [$]')
slope = mean(abs(lm.dollars$Error))/mean(lm.dollars$Real)
#slope = mean(abs(gam.dollars$Error)/gam.dollars$Real)
ggplot(lm.dollars, aes(x=Real, y=abs(Error))) +
geom_point() +
geom_abline(intercept = 0, slope = 3*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 2*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 1*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 0*slope, linetype='dashed') +
theme_bw() +
#ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'Absolute Prediction Error [$]')
gam.dollars = data.frame(cbind(exp(gam.base.predictions)-true, true))
colnames(gam.dollars) = c('Error','Real')
ggplot(gam.dollars, aes(x=Real, y=Error)) +
geom_point() +
theme_bw() +
ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'Prediction Error [$]')
slope = mean(abs(gam.dollars$Error))/mean(gam.dollars$Real)
#slope = mean(abs(gam.dollars$Error)/gam.dollars$Real)
ggplot(gam.dollars, aes(x=Real, y=abs(Error))) +
geom_point() +
geom_abline(intercept = 0, slope = 3*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 2*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 1*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 0*slope, linetype='dashed') +
theme_bw() +
#ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'GAM Absolute Prediction Error [$]')
lm.dollars = data.frame(cbind(exp(lm.predictions)-true, true))
colnames(lm.dollars) = c('Error','Real')
ggplot(lm.dollars, aes(x=Real, y=Error)) +
geom_point() +
theme_bw() +
ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'Prediction Error [$]')
slope = mean(abs(lm.dollars$Error))/mean(lm.dollars$Real)
#slope = mean(abs(gam.dollars$Error)/gam.dollars$Real)
ggplot(lm.dollars, aes(x=Real, y=abs(Error))) +
geom_point() +
geom_abline(intercept = 0, slope = 3*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 2*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 1*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 0*slope, linetype='dashed') +
theme_bw() +
#ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'LM Absolute Prediction Error [$]')
lm.dollars = data.frame(cbind(exp(lm.predictions)-true, true))
colnames(lm.dollars) = c('Error','Real')
ggplot(lm.dollars, aes(x=Real, y=Error)) +
geom_point() +
theme_bw() +
ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'Prediction Error [$]')
slope = mean(abs(lm.dollars$Error))/mean(lm.dollars$Real)
#slope = mean(abs(gam.dollars$Error)/gam.dollars$Real)
ggplot(lm.dollars, aes(x=Real, y=abs(Error))) +
geom_point() +
geom_abline(intercept = 0, slope = 3*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 2*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 1*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 0*slope, linetype='dashed') +
theme_bw() +
#ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'LM Absolute Prediction Error [$]')
lm.dollars = data.frame(cbind(lm.predictions-log(true), log(true)))
colnames(lm.dollars) = c('Error','Real')
ggplot(lm.dollars, aes(x=Real, y=Error)) +
geom_point() +
theme_bw() +
ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'Prediction Error [$]')
slope = mean(abs(lm.dollars$Error))/mean(lm.dollars$Real)
#slope = mean(abs(gam.dollars$Error)/gam.dollars$Real)
ggplot(lm.dollars, aes(x=Real, y=abs(Error))) +
geom_point() +
geom_abline(intercept = 0, slope = 3*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 2*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 1*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 0*slope, linetype='dashed') +
theme_bw() +
#ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'LM Absolute Prediction Error [$]')
lm.dollars = data.frame(cbind(exp(lm.predictions)-true, true))
colnames(lm.dollars) = c('Error','Real')
ggplot(lm.dollars, aes(x=Real, y=Error)) +
geom_point() +
theme_bw() +
ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'Prediction Error [$]')
slope = mean(abs(lm.dollars$Error))/mean(lm.dollars$Real)
#slope = mean(abs(gam.dollars$Error)/gam.dollars$Real)
ggplot(lm.dollars, aes(x=Real, y=abs(Error))) +
geom_point() +
geom_abline(intercept = 0, slope = 3*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 2*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 1*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 0*slope, linetype='dashed') +
theme_bw() +
#ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'LM Absolute Prediction Error [$]')
lm.dollars = data.frame(cbind(lm.predictions-log(true), log(true)))
colnames(lm.dollars) = c('Error','Real')
ggplot(lm.dollars, aes(x=Real, y=Error)) +
geom_point() +
theme_bw() +
ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'Prediction Error [$]')
slope = mean(abs(lm.dollars$Error))/mean(lm.dollars$Real)
#slope = mean(abs(gam.dollars$Error)/gam.dollars$Real)
ggplot(lm.dollars, aes(x=Real, y=abs(Error))) +
geom_point() +
geom_abline(intercept = 0, slope = 3*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 2*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 1*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 0*slope, linetype='dashed') +
theme_bw() +
#ylim(-1e5,1e5) +
xlim(1,log(7e5)) +
labs(x = 'True Price [$]',y = 'LM Absolute Prediction Error [$]')
lm.dollars = data.frame(cbind(exp(lm.predictions)-true, true))
colnames(lm.dollars) = c('Error','Real')
ggplot(lm.dollars, aes(x=Real, y=Error)) +
geom_point() +
theme_bw() +
ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'Prediction Error [$]')
slope = mean(abs(lm.dollars$Error))/mean(lm.dollars$Real)
#slope = mean(abs(gam.dollars$Error)/gam.dollars$Real)
ggplot(lm.dollars, aes(x=Real, y=abs(Error))) +
geom_point() +
geom_abline(intercept = 0, slope = 3*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 2*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 1*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 0*slope, linetype='dashed') +
theme_bw() +
#ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'LM Absolute Prediction Error [$]')
lm.dollars = data.frame(cbind(lm.predictions-log(true), log(true)))
colnames(lm.dollars) = c('Error','Real')
ggplot(lm.dollars, aes(x=Real, y=Error)) +
geom_point() +
theme_bw() +
ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'Prediction Error [$]')
slope = mean(abs(lm.dollars$Error))/mean(lm.dollars$Real)
#slope = mean(abs(gam.dollars$Error)/gam.dollars$Real)
ggplot(lm.dollars, aes(x=Real, y=abs(Error))) +
geom_point() +
geom_abline(intercept = 0, slope = 3*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 2*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 1*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 0*slope, linetype='dashed') +
theme_bw() +
#ylim(-1e5,1e5) +
#xlim(1,log(7e5)) +
labs(x = 'True Price [$]',y = 'LM Absolute Prediction Error [$]')
lm.dollars = data.frame(cbind(exp(lm.predictions)-true, true))
colnames(lm.dollars) = c('Error','Real')
ggplot(lm.dollars, aes(x=Real, y=Error)) +
geom_point() +
theme_bw() +
ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'Prediction Error [$]')
slope = mean(abs(lm.dollars$Error))/mean(lm.dollars$Real)
#slope = mean(abs(gam.dollars$Error)/gam.dollars$Real)
ggplot(lm.dollars, aes(x=Real, y=abs(Error))) +
geom_point() +
geom_abline(intercept = 0, slope = 3*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 2*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 1*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 0*slope, linetype='dashed') +
theme_bw() +
#ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'LM Absolute Prediction Error [$]')
lm.dollars = data.frame(cbind(lm.predictions-log(true), log(true)))
colnames(lm.dollars) = c('Error','Real')
ggplot(lm.dollars, aes(x=Real, y=Error)) +
geom_point() +
theme_bw() +
#ylim(-1e5,1e5) +
#xlim(0,7e5) +
labs(x = 'Log True Price',y = 'LM Prediction Error')
slope = mean(abs(lm.dollars$Error))/mean(lm.dollars$Real)
#slope = mean(abs(gam.dollars$Error)/gam.dollars$Real)
ggplot(lm.dollars, aes(x=Real, y=abs(Error))) +
geom_point() +
geom_abline(intercept = 0, slope = 3*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 2*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 1*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 0*slope, linetype='dashed') +
theme_bw() +
#ylim(-1e5,1e5) +
#xlim(1,log(7e5)) +
labs(x = 'Log True Price',y = 'LM Absolute Prediction Error')
lm.dollars = data.frame(cbind(exp(lm.predictions)-true, true))
colnames(lm.dollars) = c('Error','Real')
ggplot(lm.dollars, aes(x=Real, y=Error)) +
geom_point() +
theme_bw() +
ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'Prediction Error [$]')
slope = mean(abs(lm.dollars$Error))/mean(lm.dollars$Real)
#slope = mean(abs(gam.dollars$Error)/gam.dollars$Real)
res_lm = ggplot(lm.dollars, aes(x=Real, y=abs(Error))) +
geom_point() +
geom_abline(intercept = 0, slope = 3*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 2*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 1*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 0*slope, linetype='dashed') +
theme_bw() +
#ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'LM Absolute Prediction Error [$]')
ggsave(paste0("./presentation/res_lm.png"), res_lm)
lm.dollars = data.frame(cbind(lm.predictions-log(true), log(true)))
colnames(lm.dollars) = c('Error','Real')
ggplot(lm.dollars, aes(x=Real, y=Error)) +
geom_point() +
theme_bw() +
#ylim(-1e5,1e5) +
#xlim(0,7e5) +
labs(x = 'Log True Price',y = 'LM Prediction Error')
slope = mean(abs(lm.dollars$Error))/mean(lm.dollars$Real)
#slope = mean(abs(gam.dollars$Error)/gam.dollars$Real)
log_res_lm = ggplot(lm.dollars, aes(x=Real, y=abs(Error))) +
geom_point() +
geom_abline(intercept = 0, slope = 3*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 2*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 1*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 0*slope, linetype='dashed') +
theme_bw() +
#ylim(-1e5,1e5) +
#xlim(1,log(7e5)) +
labs(x = 'Log True Price',y = 'LM Absolute Prediction Error')
ggsave(paste0("./presentation/log_res_lm.png"), log_res_lm)
gam.dollars = data.frame(cbind(exp(gam.base.predictions)-true, true))
colnames(gam.dollars) = c('Error','Real')
ggplot(gam.dollars, aes(x=Real, y=Error)) +
geom_point() +
theme_bw() +
ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'Prediction Error [$]')
slope = mean(abs(gam.dollars$Error))/mean(gam.dollars$Real)
#slope = mean(abs(gam.dollars$Error)/gam.dollars$Real)
res_gam = ggplot(gam.dollars, aes(x=Real, y=abs(Error))) +
geom_point() +
geom_abline(intercept = 0, slope = 3*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 2*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 1*slope, linetype='dashed') +
geom_abline(intercept = 0, slope = 0*slope, linetype='dashed') +
theme_bw() +
#ylim(-1e5,1e5) +
xlim(0,7e5) +
labs(x = 'True Price [$]',y = 'GAM Absolute Prediction Error [$]')
ggsave(paste0("./presentation/res_gam.png"), res_gam)
qqplot(gam.base.predictions)
?qqplot
qqplot(gam.base.predictions[1])
qqplot(gam.base.predictions[[1]])
## Exploratory GAM Model
# ames.gam <- mgcv::gam(log(SalePrice)
#                 ~ s(GrLivArea, by=OverallQual, bs='cs', id=1, sp=0.1) # Above Ground SF
#                 + s(TotalBsmtSF,by=HasGarage,bs='cs') # Bsmt SF
#                 #+ PriceRange:OverallCond
#                 + s(YearBuilt, bs='cs')
#                 + Fireplaces:PriceRange
#                 + s(MSSubClass, bs='cs')
#                 + s(GarageArea, by = ExterCond, bs='cs') # Garage Predictors=
#                 #+ s(MSSubClass, bs='cs')
#                 #+ Neighborhood:ExterQual
#                 #+ AfterWW2
#                 #+ Neighborhood:ExterCond
#                 #+ ti(MSSubClass, GrLivArea)
#                 #+ s(HouseStyle, by= AfterWW2) # doesn't work
#                 + Neighborhood:OverallCond #+ BsmtQual:TotalBsmtSF + ExterCond:(sqrt(GarageArea)+sqrt(LotArea))
#              #   + s(LotArea) + s(LotFrontage) +s(OpenPorchSF) # + AfterWW2 + Neighborhood,
#                 ,method='GCV.Cp', data=ames, gamma=1.3)
## Base GAM Model
ames.gam.base <- mgcv::gam(logPrice
~ s(GrLivArea, by=PriceRange)
+ s(TotalBsmtSF)
+ s(OverallQual, by=PriceRange)
+ s(Age)
+ s(YearBuilt)
+ Fireplaces:PriceRange
+ s(MSSubClass)
+ Neighborhood:OverallCond
+ s(GarageArea, by=GarageCars)
+ FullBath,
#method='GCV.Cp',
data=ames)
## Base LM Model
ames.lm <- mgcv::gam(logPrice
~ GrLivArea:PriceRange
+ TotalBsmtSF
+ OverallQual:PriceRange
+ Age
+ YearBuilt
+ Fireplaces:PriceRange
+ MSSubClass
+ Neighborhood:OverallCond
+ GarageArea:GarageCars
+ FullBath,
#method='GCV.CP',
data=ames)
true = ames_test[,'SalePrice'][[1]]
# gam.predictions = predict.gam(ames.gam, newdata = ames_test, type = 'response')
# gam.errors = gam.predictions - log(true)
# gam.diff =exp(gam.predictions) - true
gam.base.predictions = predict.gam(ames.gam.base, newdata = ames_test, type = 'response')
gam.base.errors = gam.base.predictions - log(true)
gam.base.diff =exp(gam.base.predictions) - true
lm.predictions = predict(ames.lm, newdata = ames_test)
lm.errors = lm.predictions - log(true)
lm.diff = exp(lm.predictions) - true
plot(density(gam.base.errors), col ='red')
lines(density(lm.errors), col='black', lty=2)
#plot(ames.gam)
legend("topright",legend=c('GAM Residuals','LM Residuals'),
col=c("red","black"), lty=1:2, cex=0.8)
print(paste('GAM RMSE:',sqrt(mean(gam.base.errors^2))))
print(paste('LM RMSE:',sqrt(mean(lm.errors^2))))
print(paste('GAM: Error in $ as Predicted:',round(mean(abs(gam.base.diff)),2)))
print(paste('LM: Error in $ as Predicted:',round(mean(abs(lm.diff)),2)))
#plot(ames_test[,'SalePrice'][[1]], gam.errors)
plot(true, exp(gam.base.predictions), ylim=c(0,7e5), xlim=c(0,7e5))
abline(a=0,b=1)
#points(ames_test_[,'SalePrice'][[1]], exp(lm.predictions))
plot(true, exp(lm.predictions), ylim=c(0,7e5), xlim=c(0,7e5))
abline(a=0,b=1)
summary(ames.gam.base)
knitr::opts_chunk$set(fig.width=22, fig.height=20)
library(tidyverse)
library(caret)
library(mgcv)
library(visreg)
ames = read_csv('./data/train_clean.csv')
test = read_csv('./data/test_clean.csv')
ames = ames[,order(colnames(ames))]
ames = ames %>% dplyr::select(-X1)
ames = ames[,order(colnames(ames))] %>%
rename('FirstFlrSF' = "1stFlrSF", 'SecFlrSF' = '2ndFlrSF', 'ThreeSeaPorch' = '3SsnPorch')
test = test[,order(colnames(test))] %>%
rename('FirstFlrSF' = "1stFlrSF", 'SecFlrSF' = '2ndFlrSF', 'ThreeSeaPorch' = '3SsnPorch')
test[is.na(test)] <- 0
#ames %>% mutate(PriceRange = ifelse(Neighborhood %in% medians$Neighborhood, factor(medians$PriceRange),0)) %>% select(c(Neighborhood,PriceRange))
ames$logPrice = log(ames$SalePrice)
ames$Age <- as.numeric(ames$YrSold)-ames$YearRemodAdd
#ames = ames[-c(524, 1299),]
test$Age <- as.numeric(test$YrSold)-test$YearRemodAdd
# means = ames %>% group_by(Neighborhood) %>% summarise(MeanPrice = mean(logPrice))
# means$PriceRange = means$MeanPrice %>% cut_number(5, labels=c('Cheap','LowerMiddle','Middle','UpperMiddle','Expensive'))
#
#
# ames = ames %>% left_join(., means[,c('Neighborhood','PriceRange')], by='Neighborhood')
# test= test %>% left_join(., means[,c('Neighborhood','PriceRange')], by='Neighborhood')
ames = read_csv('./data/train_clean.csv')
test = read_csv('./data/test_clean.csv')
ames = ames[,order(colnames(ames))]
ames = ames %>% dplyr::select(-X1)
ames = ames[,order(colnames(ames))] %>%
rename('FirstFlrSF' = "1stFlrSF", 'SecFlrSF' = '2ndFlrSF', 'ThreeSeaPorch' = '3SsnPorch')
test = test[,order(colnames(test))] %>%
rename('FirstFlrSF' = "1stFlrSF", 'SecFlrSF' = '2ndFlrSF', 'ThreeSeaPorch' = '3SsnPorch')
test[is.na(test)] <- 0
#ames %>% mutate(PriceRange = ifelse(Neighborhood %in% medians$Neighborhood, factor(medians$PriceRange),0)) %>% select(c(Neighborhood,PriceRange))
ames$Age <- as.numeric(ames$YrSold)-ames$YearRemodAdd
#ames = ames[-c(524, 1299),]
test$Age <- as.numeric(test$YrSold)-test$YearRemodAdd
# means = ames %>% group_by(Neighborhood) %>% summarise(MeanPrice = mean(logPrice))
# means$PriceRange = means$MeanPrice %>% cut_number(5, labels=c('Cheap','LowerMiddle','Middle','UpperMiddle','Expensive'))
#
#
# ames = ames %>% left_join(., means[,c('Neighborhood','PriceRange')], by='Neighborhood')
# test= test %>% left_join(., means[,c('Neighborhood','PriceRange')], by='Neighborhood')
ames %>%
ggplot(aes(x=GrLivArea,y=SalePrice, col=PriceRange)) + geom_point()
colnames(ames)
knitr::opts_chunk$set(fig.width=22, fig.height=20)
library(tidyverse)
library(caret)
library(mgcv)
library(visreg)
ames = read_csv('./data/train_clean.csv')
test = read_csv('./data/test_clean.csv')
ames = ames[,order(colnames(ames))]
ames = ames %>% dplyr::select(-X1)
ames = ames[,order(colnames(ames))] %>%
rename('FirstFlrSF' = "1stFlrSF", 'SecFlrSF' = '2ndFlrSF', 'ThreeSeaPorch' = '3SsnPorch')
test = test[,order(colnames(test))] %>%
rename('FirstFlrSF' = "1stFlrSF", 'SecFlrSF' = '2ndFlrSF', 'ThreeSeaPorch' = '3SsnPorch')
test[is.na(test)] <- 0
#ames %>% mutate(PriceRange = ifelse(Neighborhood %in% medians$Neighborhood, factor(medians$PriceRange),0)) %>% select(c(Neighborhood,PriceRange))
ames$Age <- as.numeric(ames$YrSold)-ames$YearRemodAdd
#ames = ames[-c(524, 1299),]
test$Age <- as.numeric(test$YrSold)-test$YearRemodAdd
# means = ames %>% group_by(Neighborhood) %>% summarise(MeanPrice = mean(logPrice))
# means$PriceRange = means$MeanPrice %>% cut_number(5, labels=c('Cheap','LowerMiddle','Middle','UpperMiddle','Expensive'))
#
#
# ames = ames %>% left_join(., means[,c('Neighborhood','PriceRange')], by='Neighborhood')
# test= test %>% left_join(., means[,c('Neighborhood','PriceRange')], by='Neighborhood')
colnames(ames)
rm(list=ls())
knitr::opts_chunk$set(fig.width=22, fig.height=20)
library(tidyverse)
library(caret)
library(mgcv)
library(visreg)
ames = read_csv('./data/train_clean.csv')
test = read_csv('./data/test_clean.csv')
ames = ames[,order(colnames(ames))]
ames = ames %>% dplyr::select(-X1)
ames = ames[,order(colnames(ames))] %>%
rename('FirstFlrSF' = "1stFlrSF", 'SecFlrSF' = '2ndFlrSF', 'ThreeSeaPorch' = '3SsnPorch')
test = test[,order(colnames(test))] %>%
rename('FirstFlrSF' = "1stFlrSF", 'SecFlrSF' = '2ndFlrSF', 'ThreeSeaPorch' = '3SsnPorch')
test[is.na(test)] <- 0
#ames %>% mutate(PriceRange = ifelse(Neighborhood %in% medians$Neighborhood, factor(medians$PriceRange),0)) %>% select(c(Neighborhood,PriceRange))
ames$Age <- as.numeric(ames$YrSold)-ames$YearRemodAdd
#ames = ames[-c(524, 1299),]
test$Age <- as.numeric(test$YrSold)-test$YearRemodAdd
# means = ames %>% group_by(Neighborhood) %>% summarise(MeanPrice = mean(logPrice))
# means$PriceRange = means$MeanPrice %>% cut_number(5, labels=c('Cheap','LowerMiddle','Middle','UpperMiddle','Expensive'))
#
#
# ames = ames %>% left_join(., means[,c('Neighborhood','PriceRange')], by='Neighborhood')
# test= test %>% left_join(., means[,c('Neighborhood','PriceRange')], by='Neighborhood')
colnames(ames)
ames = read_csv('./data/train_clean.csv')
test = read_csv('./data/test_clean.csv')
ames = ames[,order(colnames(ames))]
ames = ames %>% dplyr::select(-X1)
ames = ames[,order(colnames(ames))] %>%
rename('FirstFlrSF' = "1stFlrSF", 'SecFlrSF' = '2ndFlrSF', 'ThreeSeaPorch' = '3SsnPorch')
test = test[,order(colnames(test))] %>%
rename('FirstFlrSF' = "1stFlrSF", 'SecFlrSF' = '2ndFlrSF', 'ThreeSeaPorch' = '3SsnPorch')
test[is.na(test)] <- 0
#ames %>% mutate(PriceRange = ifelse(Neighborhood %in% medians$Neighborhood, factor(medians$PriceRange),0)) %>% select(c(Neighborhood,PriceRange))
# ames$Age <- as.numeric(ames$YrSold)-ames$YearRemodAdd
# #ames = ames[-c(524, 1299),]
#
# test$Age <- as.numeric(test$YrSold)-test$YearRemodAdd
# means = ames %>% group_by(Neighborhood) %>% summarise(MeanPrice = mean(logPrice))
# means$PriceRange = means$MeanPrice %>% cut_number(5, labels=c('Cheap','LowerMiddle','Middle','UpperMiddle','Expensive'))
#
#
# ames = ames %>% left_join(., means[,c('Neighborhood','PriceRange')], by='Neighborhood')
# test= test %>% left_join(., means[,c('Neighborhood','PriceRange')], by='Neighborhood')
colnames(ames)
setwd("~/Desktop/Ames-Housing/Sam")
knitr::opts_chunk$set(fig.width=22, fig.height=20)
library(tidyverse)
library(caret)
library(mgcv)
library(visreg)
ames = read_csv('./data/train_clean.csv')
test = read_csv('./data/test_clean.csv')
ames = ames[,order(colnames(ames))]
ames = ames %>% dplyr::select(-X1)
ames = ames[,order(colnames(ames))] %>%
rename('FirstFlrSF' = "1stFlrSF", 'SecFlrSF' = '2ndFlrSF', 'ThreeSeaPorch' = '3SsnPorch')
test = test[,order(colnames(test))] %>%
rename('FirstFlrSF' = "1stFlrSF", 'SecFlrSF' = '2ndFlrSF', 'ThreeSeaPorch' = '3SsnPorch')
test[is.na(test)] <- 0
#ames %>% mutate(PriceRange = ifelse(Neighborhood %in% medians$Neighborhood, factor(medians$PriceRange),0)) %>% select(c(Neighborhood,PriceRange))
# ames$Age <- as.numeric(ames$YrSold)-ames$YearRemodAdd
# #ames = ames[-c(524, 1299),]
#
# test$Age <- as.numeric(test$YrSold)-test$YearRemodAdd
# means = ames %>% group_by(Neighborhood) %>% summarise(MeanPrice = mean(logPrice))
# means$PriceRange = means$MeanPrice %>% cut_number(5, labels=c('Cheap','LowerMiddle','Middle','UpperMiddle','Expensive'))
#
#
# ames = ames %>% left_join(., means[,c('Neighborhood','PriceRange')], by='Neighborhood')
# test= test %>% left_join(., means[,c('Neighborhood','PriceRange')], by='Neighborhood')
colnames(ames)
